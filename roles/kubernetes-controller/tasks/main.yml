---

- name: Install
  block: 
    - name: Create dirs
      file: 
        path: '{{ item }}'
        state: directory
        owner: root
        group: root
        mode: '0755'
      become: true
      with_items: 
        - '{{ kubernetes_controller_bin_dir }}'
        - '{{ kubernetes_controller_data_dir }}'

    - name: Install binaries
      get_url: 
        url: '{{ item }}'
        dest: '{{ kubernetes_controller_bin_dir }}'
        mode: '0755'
      with_items:
        - '{{ kubernetes_download_url_base }}/v{{ kubernetes_version }}/bin/linux/amd64/kube-apiserver'
        - '{{ kubernetes_download_url_base }}/v{{ kubernetes_version }}/bin/linux/amd64/kube-controller-manager'
        - '{{ kubernetes_download_url_base }}/v{{ kubernetes_version }}/bin/linux/amd64/kube-scheduler'
        - '{{ kubernetes_download_url_base }}/v{{ kubernetes_version }}/bin/linux/amd64/kubectl'
  become: true
  tags: install

- name: Configure
  block: 

    - name: Certificate request for Kubernetes API Server certificate
      import_role: 
        name: cfssl-csr
      vars: 
        cfssl_csr: 
          name: kubernetes
          hostnames: "{{ kubernetes_controller_csr_hostnames_base 
            + kubernetes_controller_host_ip_list 
            + [kubernetes_api_static_ip_address] }}"
          # The included role seems to evaluate role_path to itself.
          csr_path: '{{ playbook_dir }}/roles/kubernetes-controller/files/kubernetes-csr.json'
      run_once: true

    - name: Copy certificates to host
      copy: 
        src: '{{ kubernetes_local_certs_dir }}/{{ item }}'
        dest: '{{ kubernetes_controller_data_dir }}'
      with_items:
        - 'kubernetes.pem'
        - 'kubernetes-key.pem'
        - 'ca.pem'
        - 'ca-key.pem'
      become: true

    - name: Check if encryption key exists
      local_action:
        module: stat
        path: '{{ kubernetes_controller_encryption_config_local }}'
      run_once: true
      register: encryption_key_file_stat

    - name: Generate encryption key
      block: 
        - name: Generate encryption key
          local_action: 'shell head -c 32 /dev/urandom | base64'
          register: generated_encryption_key
        
        - set_fact: kubernetes_controller_encryption_key='{{ generated_encryption_key.stdout }}'

        - name: Save encryption key locally
          local_action:
            module: template
            src: encryption_config.yml.j2
            dest: '{{ kubernetes_controller_encryption_config_local }}'

      run_once: true
      when: encryption_key_file_stat.stat.exists == false

    - name: Copy encryption config to host
      template: 
        src: '{{ kubernetes_controller_encryption_config_local }}'
        dest: '{{ kubernetes_controller_data_dir }}/encryption_config.yml'
      become: true

  tags: configure